{% if cookiecutter.environment_manager == 'poetry' %}
[tool.poetry]
name = {{ cookiecutter.module_name|tojson }}
version = "0.0.1"
description = {{ cookiecutter.description|tojson }}
authors = [
  {{ cookiecutter.author_name|tojson }}
]
{% if cookiecutter.open_source_license != 'No license file' %}license = { file = "LICENSE" }{% endif %}
readme = "README.md"
package-mode = false
classifiers = [
    "Programming Language :: Python :: 3",
    {% if cookiecutter.open_source_license == 'MIT' %}"License :: OSI Approved :: MIT License"{% elif cookiecutter.open_source_license == 'BSD-3-Clause' %}"License :: OSI Approved :: BSD License"{% endif %}
]

[tool.poetry.dependencies]
python = "~={{ cookiecutter.python_version_number }}"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.5"
dvc = "^3.59.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

{% else %}
[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = {{ cookiecutter.module_name|tojson }}
version = "0.0.1"
description = {{ cookiecutter.description|tojson }}
authors = [
  { name = {{ cookiecutter.author_name|tojson }} },
]
{% if cookiecutter.open_source_license != 'No license file' %}license = { file = "LICENSE" }{% endif %}
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    {% if cookiecutter.open_source_license == 'MIT' %}"License :: OSI Approved :: MIT License"{% elif cookiecutter.open_source_license == 'BSD-3-Clause' %}"License :: OSI Approved :: BSD License"{% endif %}
]
requires-python = "~={{ cookiecutter.python_version_number }}"
{% endif %}

{% if cookiecutter.linting_and_formatting == 'flake8+black+isort' %}
[tool.black]
line-length = 99
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
)/
'''

[tool.isort]
target-version = "py310"
profile = "black"
known_first_party = ["{{ cookiecutter.module_name }}"]
force_sort_within_sections = true
{% endif %}
{% if cookiecutter.linting_and_formatting == 'ruff' %}
[tool.ruff]
line-length = 99
src = ["{{ cookiecutter.module_name }}"]
include = ["pyproject.toml", "{{ cookiecutter.module_name }}/**/*.py"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isor
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.isort]
known-first-party = ["{{ cookiecutter.module_name }}"]
force-sort-within-sections = true

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
{% endif %}
